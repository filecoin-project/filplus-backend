//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "applications")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub onchain_address: String,
    pub client_github_handle: Option<String>,
    pub stale: Option<bool>,
    pub stale_timestamp: Option<DateTime>,
    pub total_datacap_reached: Option<bool>,
    pub total_datacap_reached_timestamp: Option<DateTime>,
    pub created: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::blockchain::Entity")]
    Blockchain,
    #[sea_orm(
        belongs_to = "super::clients::Entity",
        from = "Column::ClientGithubHandle",
        to = "super::clients::Column::GithubHandle",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Clients,
    #[sea_orm(has_many = "super::datacap::Entity")]
    Datacap,
}

impl Related<super::blockchain::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blockchain.def()
    }
}

impl Related<super::clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clients.def()
    }
}

impl Related<super::datacap::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Datacap.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
