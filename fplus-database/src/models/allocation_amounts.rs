//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14
use sea_orm::{entity::prelude::*, FromQueryResult};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "allocation_amounts")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub allocator_id: i32,   
    pub quantity_option: String,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Allocators,
}

#[derive(Debug, FromQueryResult)]
pub struct QuantityOptionModel {
    pub quantity_option: String,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Allocators => Entity::belongs_to(super::allocators::Entity)
                .from(Column::AllocatorId)
                .to(super::allocators::Column::Id)
                .into(),
        }
    }
}

impl Related<super::allocators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Allocators.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
